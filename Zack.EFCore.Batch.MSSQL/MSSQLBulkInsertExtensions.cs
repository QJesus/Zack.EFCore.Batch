using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Collections.Generic;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace System.Linq
{
    public static class MSSQLBulkInsertExtensions
    {
        private static bool IsNavigationProp(IEntityType entityType,PropertyInfo propInfo)
        {
            return entityType.FindNavigation(propInfo) != null;
        }

        private static DbProp[] ParseDbProps<TEntity>(DbContext dbCtx) where TEntity : class
        {
            var entityType = dbCtx.Set<TEntity>().EntityType;
            //only properties of simple type are supported.
            var props = typeof(TEntity).GetProperties().Where(p => !IsNavigationProp(entityType,p));
            List<DbProp> propFields = new List<DbProp>();           
            
            foreach (var prop in props)
            {
                string propName = prop.Name;
                var efProp = entityType.GetProperty(propName);
                //skip the columns those are autogenerated
                if(efProp.ValueGenerated== ValueGenerated.OnAdd|| efProp.ValueGenerated== ValueGenerated.OnAddOrUpdate)
                {
                    continue;
                }
                string dbColName = efProp.GetColumnName(StoreObjectIdentifier.SqlQuery(entityType));
                string dbColType = efProp.GetColumnType();
                DbProp dbProp = new DbProp { ColumnName=dbColName,ColumnType= dbColType ,Property=prop,
                    PropertyName=propName,PropertyType=prop.PropertyType,EFMeta=efProp};
                propFields.Add(dbProp);
            }
            return propFields.ToArray();
        }

        public static async Task BulkInsertAsync<TEntity>(this DbContext dbCtx,
            IEnumerable<TEntity> items, CancellationToken cancellationToken = default) where TEntity : class
        {
            var dbProps = ParseDbProps<TEntity>(dbCtx);
            var conn = dbCtx.Database.GetDbConnection();
            await conn.OpenAsync(cancellationToken);
            using (SqlBulkCopy bulkCopy = new SqlBulkCopy((SqlConnection)conn))
            {
                var entityType = dbCtx.Set<TEntity>().EntityType;
                bulkCopy.DestinationTableName = entityType.GetSchemaQualifiedTableName();//Schema may be used
                
                DataTable dataTable = new DataTable();
                foreach(var dbProp in dbProps)
                {
                    string columnName = dbProp.ColumnName;
                    dataTable.Columns.Add(columnName, dbProp.PropertyType);
                    bulkCopy.ColumnMappings.Add(columnName, columnName);
                }
                foreach(var item in items)
                {
                    DataRow row = dataTable.NewRow();
                    foreach (var dbProp in dbProps)
                    {
                        object value = dbProp.Property.GetValue(item);
                        row[dbProp.ColumnName] = value;
                    }
                    dataTable.Rows.Add(row);
                }
                await bulkCopy.WriteToServerAsync(dataTable, cancellationToken);
            }
        }
    }

    public class DbProp
    {
        public IProperty EFMeta{get;set;}
        public string ColumnName { get; set; }
        public string ColumnType { get; set; }

        public PropertyInfo Property { get; set; }
        public string PropertyName { get; set; }
        public Type PropertyType { get; set; }
    }
}
